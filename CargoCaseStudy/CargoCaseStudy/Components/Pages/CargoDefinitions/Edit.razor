@page "/CargoDefinitions/Edit/{Id:int}"
@inject NavigationManager Navigation
@rendermode InteractiveServer
<h3>Edit Cargo Definitions</h3>



<EditForm Model="@existingData" OnValidSubmit="HandleEdit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Cargo</label>
        <InputText @bind-Value="existingData.Cargo" />
        <ValidationMessage For="() => existingData.Cargo" />
    </div>
    <div>
        <label>Min Weight</label>
        <InputNumber @bind-Value="existingData.MinWeight" step="any" />
        <ValidationMessage For="() => existingData.MinWeight" />
    </div>
    <div>
        <label>Max Weight</label>
        <InputNumber @bind-Value="existingData.MaxWeight" step="any" />
        <ValidationMessage For="() => existingData.MaxWeight" />
    </div>

    <button type="submit">Save Changes</button>
</EditForm>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@code {
    [Parameter] public int Id { get; set; }
    private string errorMessage = string.Empty;

    private CargoDefinition existingData = new CargoDefinition();

    protected override async Task OnInitializedAsync()
    {
        errorMessage = string.Empty;
        try
        {
            existingData = await Http.GetFromJsonAsync<CargoDefinition>($"/api/cargo/getByID/{Id}");
            if (existingData == null)
            {
                errorMessage = "Error: Cargo not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading cargo: {ex.Message}";
        }
    }

    private async Task HandleEdit()
    {
        errorMessage = string.Empty;
        try
        {
            var response = await Http.PutAsJsonAsync($"/api/cargo/edit/{Id}", existingData);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/CargoDefinitions/Index");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to edit data. Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An exception occurred: {ex.Message}";
        }
    }
}
