@page "/ShippingSelectionRules/Add"
@inject NavigationManager Navigation

@rendermode InteractiveServer

<EditForm Model="@newData" OnValidSubmit="HandleAdd" FormName="addForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Cargo</label>
        <InputText @bind-Value="@newData.Cargo" />
        <ValidationMessage For="() => newData.Cargo" />
    </div>

    <div>
        <label>OrderNo</label>
        <InputNumber @bind-Value="@newData.OrderNo" step="any" />
        <ValidationMessage For="() => newData.OrderNo" />
    </div>

    <div>
        <label>City</label>
        <InputText @bind-Value="@newData.City" step="any" />
        <ValidationMessage For="() => newData.City" />
    </div>
    <div>
        <label>District</label>
        <InputText @bind-Value="@newData.District" step="any" />
        <ValidationMessage For="() => newData.District" />
    </div>


    <button type="submit">Add Data</button>
</EditForm>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
@code {
    private ShippingSelectionRulesViewModel newData = new ShippingSelectionRulesViewModel();
    private string? errorMessage;

    protected override void OnInitialized()
    {
        newData ??= new();
        errorMessage = string.Empty;
    }

    private async Task HandleAdd()
    {
        errorMessage = string.Empty;
        try
        {


            var response = await Http.PostAsJsonAsync("/api/ShippingSelectionRules/create", newData);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/ShippingSelectionRules/Index");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to add data. Error: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An exception occurred: {ex.Message}";
        }
    }
}